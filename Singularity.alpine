bootstrap: docker
from: frolvlad/alpine-python3


%environment
    # setup necessary bash variables
    export LC_ALL=en_US.utf8
    export POETRY_VIRTUALENVS_IN_PROJECT=1
    # setup PATH to point to julia, poetry, and blender
    export PATH=$PATH:/julia/bin
    export PATH=$PATH:/poetry/bin
    export PATH=$PATH:/blender

%runscript
    exec bash "$@"

%post

    sh -c "cat <<EOT >> /etc/apk/repositories
http://nl.alpinelinux.org/alpine/main/edge
http://nl.alpinelinux.org/alpine/edge/community
http://nl.alpinelinux.org/alpine/edge/testing
EOT"

    cat /etc/apk/repositories

    apk update || echo "issue with apk"
    # apk add --no-cache  \
    apk add -U --no-cache --allow-untrusted --repository "http://dl-cdn.alpinelinux.org/alpine/edge/testing" \
        bash build-base linux-headers git procps \
        python3-dev libffi-dev openssl-dev ncurses-dev coreutils curl \
        blender

    /usr/bin/python3 -m pip install --upgrade pip
    pip install virtualenv

    # build context
    mkdir /build-ctx && cd /build-ctx

    # set up poetry (package manager for python)
    export POETRY_HOME=/poetry
    curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python3
    chmod +x /poetry/bin/*

    # Set up Julia
    JULIA_VER="1.5.2"
    wget "https://julialang-s3.julialang.org/bin/linux/x64/1.5/julia-${JULIA_VER}-linux-x86_64.tar.gz"
    tar -xzf "julia-${JULIA_VER}-linux-x86_64.tar.gz"
    mv "julia-${JULIA_VER}" "/julia"
    chmod +x /julia/bin/*

    # clean up
    rm -rf /build-ctx

    # Add an sbatch workaround
    echo '#!/bin/bash\nssh -y "$HOSTNAME"  sbatch "$@"'  > /usr/bin/sbatch
    chmod +x /usr/bin/sbatch

    # Add an scancel workaround
    echo '#!/bin/bash\nssh -y "$HOSTNAME"  scancel "$@"'  > /usr/bin/scancel
    chmod +x /usr/bin/scancel

    # Add an srun workaround
    echo '#!/bin/bash\nssh -y "$HOSTNAME"  srun "$@"'  > /usr/bin/srun
    chmod +x /usr/bin/srun
