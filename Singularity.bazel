bootstrap: docker
from: frolvlad/alpine-python3


%environment
    # setup necessary bash variables
    export LC_ALL=en_US.utf8
    export POETRY_VIRTUALENVS_IN_PROJECT=1
    # setup PATH to point to julia, poetry, and blender
    export PATH=$PATH:/julia/bin
    export PATH=$PATH:/poetry/bin
    # export PATH=$PATH:/blender

%runscript
    exec bash "$@"

%post

    apk add --no-cache --repository "http://dl-cdn.alpinelinux.org/alpine/edge/testing" \
        bash build-base linux-headers git procps \
        python3-dev libffi-dev openssl-dev ncurses-dev \
        curl coreutils openjdk11 zip unzip # bazel deps

    /usr/bin/python3 -m pip install --upgrade pip
    pip install virtualenv


    # build context

    mkdir /build-ctx && cd /build-ctx
    # set up poetry (package manager for python)
    export POETRY_HOME=/poetry
    curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python3
    chmod +x /poetry/bin/*



    BVER="3.6.0"
    wget "https://github.com/bazelbuild/bazel/archive/${BVER}.tar.gz" \
    mkdir "bazel-${BVER}" && cd "bazel-${BVER}"
    wget "https://releases.bazel.build/3.6.0/release/bazel-3.6.0-dist.zip" \
        -O "bazel.zip"
    unzip "bazel.zip"
    # CRUCIAL for bazel to not freak out about infinite symlinks
    rm "/usr/lib/jvm/java-11-openjdk/jre"
    env JAVA_HOME="/usr/lib/jvm/java-11-openjdk/" \
        EXTRA_BAZEL_ARGS="--host_javabase=@local_jdk//:jdk" \
        bash ./compile.sh

    cp output/bazel /usr/bin/bazel
    chmod +x /usr/bin/bazel

    # Setup blender
    # wget "https://yale.box.com/shared/static/nn6n5iyo5m4tzl5u9yoy2dvv1ohk22xj.xz" \
    #     -O /blender.tar.gz
    # tar xf /blender.tar.gz
    # mv blender-2.* /blender
    # chmod +x /blender/blender

    # Set up Julia
    wget https://julialang-s3.julialang.org/bin/linux/x64/1.5/julia-1.5.2-linux-x86_64.tar.gz
    tar -xzf julia-1.5.2-linux-x86_64.tar.gz
    mv julia* /julia
    chmod +x /julia/bin/*

    # clean up
    rm -rf /build-ctx

    # Add an sbatch workaround
    echo '#!/bin/bash\nssh -y "$HOSTNAME"  sbatch "$@"'  > /usr/bin/sbatch
    chmod +x /usr/bin/sbatch

    # Add an scancel workaround
    echo '#!/bin/bash\nssh -y "$HOSTNAME"  scancel "$@"'  > /usr/bin/scancel
    chmod +x /usr/bin/scancel

    # Add an srun workaround
    echo '#!/bin/bash\nssh -y "$HOSTNAME"  srun "$@"'  > /usr/bin/srun
    chmod +x /usr/bin/srun
